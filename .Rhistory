postbaselinecuts <- read_rds(here("lib", "design", "postbaselinecuts.rds"))
matching_variables <- read_rds(here("lib", "design", "matching_variables.rds"))
if(Sys.getenv("OPENSAFELY_BACKEND") %in% c("", "expectations")){
recruitment_period_cutoff <- 0.1
} else{
recruitment_period_cutoff <- read_rds(here("lib", "design", "recruitment_period_cutoff.rds"))
}
# create output directories ----
output_dir <- here("output", "models", "seqtrialcox", treatment, outcome, subgroup)
fs::dir_create(output_dir)
## create special log file ----
cat(glue("## script info for {outcome} ##"), "  \n", file = fs::path(output_dir, glue("model_log.txt")), append = FALSE)
## functions to pass additional log info to seperate file
logoutput <- function(...){
cat(..., file = fs::path(output_dir, glue("model_log.txt")), sep = "\n  ", append = TRUE)
cat("\n", file = fs::path(output_dir, glue("model_log.txt")), sep = "\n  ", append = TRUE)
}
logoutput_datasize <- function(x){
nm <- deparse(substitute(x))
logoutput(
glue(nm, " data size = ", nrow(x)),
glue(nm, " memory usage = ", format(object.size(x), units="GB", standard="SI", digits=3L))
)
}
logoutput_table <- function(x){
capture.output(
x,
file=fs::path(output_dir, glue("model_log.txt")),
append=TRUE
)
cat("\n", file = fs::path(output_dir, glue("model_log.txt")), sep = "\n  ", append = TRUE)
}
## import globally defined study dates and convert to "Date"
study_dates <-
jsonlite::read_json(path=here("lib", "design", "study-dates.json")) %>%
map(as.Date)
## import metadata ----
events <- read_rds(here("lib", "design", "event-variables.rds"))
outcome_var <- events$event_var[events$event==outcome]
var_labels <- read_rds(here("lib", "design", "variable-labels.rds"))
# compose modelling dataset ----
## one pow per patient ----
data_cohort <- read_rds(here("output", "data", "data_cohort.rds"))
## apply subgrouping if applicable
if (subgroup!="none") {
data_cohort <- dplyr::filter_at(data_cohort,
stringr::str_split_fixed(subgroup,"-",2)[,1],
all_vars(.==stringr::str_split_fixed(subgroup,"-",2)[,2]))
}
logoutput_datasize(data_cohort)
## baseline variables ----
data_baseline <-
data_cohort %>%
transmute(
patient_id,
age,
sex,
ethnicity_combined,
imd_Q5,
region,
jcvi_group,
rural_urban_group,
prior_covid_infection,
prior_tests_cat,
multimorb,
learndis,
sev_mental,
vax12_type,
vax2_to_startdate =  study_dates$studystart_date - vax2_date,
vax2_week,
vax3_date,
vax3_type,
)
logoutput_datasize(data_baseline)
data_matched <-
read_rds(here("output", "models", "seqtrialcox", treatment, outcome, "match_data_matched.rds")) %>%
mutate(
treated_patient_id = paste0(treated, "_", patient_id),
)
data_tte <- read_rds(here("output", "models", "seqtrialcox", treatment, outcome, "match_data_tte.rds"))
if(removeobjects) rm(data_cohort)
View(data_cohort)
View(data_matched)
source('~/Documents/booster-effectiveness/analysis/design.R')
# # # # # # # # # # # # # # # # # # # # #
# This script:
# imports processed data
# fits some Cox models with time-varying effects
# The script must be accompanied by one argument:
# `outcome` - the dependent variable in the regression model
# # # # # # # # # # # # # # # # # # # # #
# Preliminaries ----
# import command-line arguments ----
args <- commandArgs(trailingOnly=TRUE)
if(length(args)==0){
# use for interactive testing
removeobjects <- FALSE
treatment <- "pfizer"
outcome <- "postest"
subgroup <- "vax12_type-pfizer-pfizer"
} else {
removeobjects <- TRUE
treatment <- args[[1]]
outcome <- args[[2]]
subgroup <- args[[3]]
}
## Import libraries ----
library('tidyverse')
library('here')
library('glue')
library('survival')
## Import custom user functions from lib
source(here("lib", "functions", "utility.R"))
source(here("lib", "functions", "survival.R"))
source(here("lib", "functions", "redaction.R"))
postbaselinecuts <- read_rds(here("lib", "design", "postbaselinecuts.rds"))
matching_variables <- read_rds(here("lib", "design", "matching_variables.rds"))
if(Sys.getenv("OPENSAFELY_BACKEND") %in% c("", "expectations")){
recruitment_period_cutoff <- 0.1
} else{
recruitment_period_cutoff <- read_rds(here("lib", "design", "recruitment_period_cutoff.rds"))
}
# create output directories ----
output_dir <- here("output", "models", "seqtrialcox", treatment, outcome, subgroup)
fs::dir_create(output_dir)
## create special log file ----
cat(glue("## script info for {outcome} ##"), "  \n", file = fs::path(output_dir, glue("model_log.txt")), append = FALSE)
## functions to pass additional log info to seperate file
logoutput <- function(...){
cat(..., file = fs::path(output_dir, glue("model_log.txt")), sep = "\n  ", append = TRUE)
cat("\n", file = fs::path(output_dir, glue("model_log.txt")), sep = "\n  ", append = TRUE)
}
logoutput_datasize <- function(x){
nm <- deparse(substitute(x))
logoutput(
glue(nm, " data size = ", nrow(x)),
glue(nm, " memory usage = ", format(object.size(x), units="GB", standard="SI", digits=3L))
)
}
logoutput_table <- function(x){
capture.output(
x,
file=fs::path(output_dir, glue("model_log.txt")),
append=TRUE
)
cat("\n", file = fs::path(output_dir, glue("model_log.txt")), sep = "\n  ", append = TRUE)
}
## import globally defined study dates and convert to "Date"
study_dates <-
jsonlite::read_json(path=here("lib", "design", "study-dates.json")) %>%
map(as.Date)
## import metadata ----
events <- read_rds(here("lib", "design", "event-variables.rds"))
outcome_var <- events$event_var[events$event==outcome]
var_labels <- read_rds(here("lib", "design", "variable-labels.rds"))
# compose modelling dataset ----
## one pow per patient ----
data_cohort <- read_rds(here("output", "data", "data_cohort.rds"))
## apply subgrouping if applicable
if (subgroup!="none") {
data_cohort <- dplyr::filter_at(data_cohort,
stringr::str_split_fixed(subgroup,"-",2)[,1],
all_vars(.==stringr::str_split_fixed(subgroup,"-",2)[,2]))
}
logoutput_datasize(data_cohort)
source('~/Documents/booster-effectiveness/analysis/model_seqtrialcox.R')
# # # # # # # # # # # # # # # # # # # # #
# This script:
# imports processed data
# fits some Cox models with time-varying effects
# The script must be accompanied by one argument:
# `outcome` - the dependent variable in the regression model
# # # # # # # # # # # # # # # # # # # # #
# Preliminaries ----
# import command-line arguments ----
args <- commandArgs(trailingOnly=TRUE)
if(length(args)==0){
# use for interactive testing
removeobjects <- FALSE
treatment <- "pfizer"
outcome <- "postest"
subgroup <- "vax12_type-pfizer-pfizer"
} else {
removeobjects <- TRUE
treatment <- args[[1]]
outcome <- args[[2]]
subgroup <- args[[3]]
}
## Import libraries ----
library('tidyverse')
library('here')
library('glue')
library('survival')
## Import custom user functions from lib
source(here("lib", "functions", "utility.R"))
source(here("lib", "functions", "survival.R"))
source(here("lib", "functions", "redaction.R"))
postbaselinecuts <- read_rds(here("lib", "design", "postbaselinecuts.rds"))
matching_variables <- read_rds(here("lib", "design", "matching_variables.rds"))
if(Sys.getenv("OPENSAFELY_BACKEND") %in% c("", "expectations")){
recruitment_period_cutoff <- 0.1
} else{
recruitment_period_cutoff <- read_rds(here("lib", "design", "recruitment_period_cutoff.rds"))
}
# create output directories ----
output_dir <- here("output", "models", "seqtrialcox", treatment, outcome, subgroup)
fs::dir_create(output_dir)
## create special log file ----
cat(glue("## script info for {outcome} ##"), "  \n", file = fs::path(output_dir, glue("model_log.txt")), append = FALSE)
## functions to pass additional log info to seperate file
logoutput <- function(...){
cat(..., file = fs::path(output_dir, glue("model_log.txt")), sep = "\n  ", append = TRUE)
cat("\n", file = fs::path(output_dir, glue("model_log.txt")), sep = "\n  ", append = TRUE)
}
logoutput_datasize <- function(x){
nm <- deparse(substitute(x))
logoutput(
glue(nm, " data size = ", nrow(x)),
glue(nm, " memory usage = ", format(object.size(x), units="GB", standard="SI", digits=3L))
)
}
logoutput_table <- function(x){
capture.output(
x,
file=fs::path(output_dir, glue("model_log.txt")),
append=TRUE
)
cat("\n", file = fs::path(output_dir, glue("model_log.txt")), sep = "\n  ", append = TRUE)
}
## import globally defined study dates and convert to "Date"
study_dates <-
jsonlite::read_json(path=here("lib", "design", "study-dates.json")) %>%
map(as.Date)
## import metadata ----
events <- read_rds(here("lib", "design", "event-variables.rds"))
outcome_var <- events$event_var[events$event==outcome]
var_labels <- read_rds(here("lib", "design", "variable-labels.rds"))
# compose modelling dataset ----
## one pow per patient ----
data_cohort <- read_rds(here("output", "data", "data_cohort.rds"))
## apply subgrouping if applicable
if (subgroup!="none") {
data_cohort <- dplyr::filter_at(data_cohort,
stringr::str_split_fixed(subgroup,"-",2)[,1],
all_vars(.==stringr::str_split_fixed(subgroup,"-",2)[,2]))
}
logoutput_datasize(data_cohort)
## baseline variables ----
data_baseline <-
data_cohort %>%
transmute(
patient_id,
age,
sex,
ethnicity_combined,
imd_Q5,
region,
jcvi_group,
rural_urban_group,
prior_covid_infection,
prior_tests_cat,
multimorb,
learndis,
sev_mental,
vax12_type,
vax2_to_startdate =  study_dates$studystart_date - vax2_date,
vax2_week,
vax3_date,
vax3_type,
)
logoutput_datasize(data_baseline)
data_matched <-
read_rds(here("output", "models", "seqtrialcox", treatment, outcome, "match_data_matched.rds")) %>%
mutate(
treated_patient_id = paste0(treated, "_", patient_id),
)
data_tte <- read_rds(here("output", "models", "seqtrialcox", treatment, outcome, "match_data_tte.rds"))
if(removeobjects) rm(data_cohort)
View(data_matched)
View(data_cohort)
source('~/Documents/booster-effectiveness/analysis/design.R')
source('~/Documents/booster-effectiveness/analysis/design.R')
source('~/Documents/booster-effectiveness/analysis/match_seqtrialcox.R')
# # # # # # # # # # # # # # # # # # # # #
# This script:
# imports processed data
# fits some Cox models with time-varying effects
# The script must be accompanied by one argument:
# `outcome` - the dependent variable in the regression model
# # # # # # # # # # # # # # # # # # # # #
# Preliminaries ----
# import command-line arguments ----
args <- commandArgs(trailingOnly=TRUE)
if(length(args)==0){
# use for interactive testing
removeobjects <- FALSE
treatment <- "pfizer"
outcome <- "postest"
subgroup <- "vax12_type-pfizer-pfizer"
} else {
removeobjects <- TRUE
treatment <- args[[1]]
outcome <- args[[2]]
subgroup <- args[[3]]
}
## Import libraries ----
library('tidyverse')
library('here')
library('glue')
library('survival')
## Import custom user functions from lib
source(here("lib", "functions", "utility.R"))
source(here("lib", "functions", "survival.R"))
source(here("lib", "functions", "redaction.R"))
postbaselinecuts <- read_rds(here("lib", "design", "postbaselinecuts.rds"))
matching_variables <- read_rds(here("lib", "design", "matching_variables.rds"))
if(Sys.getenv("OPENSAFELY_BACKEND") %in% c("", "expectations")){
recruitment_period_cutoff <- 0.1
} else{
recruitment_period_cutoff <- read_rds(here("lib", "design", "recruitment_period_cutoff.rds"))
}
# create output directories ----
output_dir <- here("output", "models", "seqtrialcox", treatment, outcome, subgroup)
fs::dir_create(output_dir)
## create special log file ----
cat(glue("## script info for {outcome} ##"), "  \n", file = fs::path(output_dir, glue("model_log.txt")), append = FALSE)
## functions to pass additional log info to seperate file
logoutput <- function(...){
cat(..., file = fs::path(output_dir, glue("model_log.txt")), sep = "\n  ", append = TRUE)
cat("\n", file = fs::path(output_dir, glue("model_log.txt")), sep = "\n  ", append = TRUE)
}
logoutput_datasize <- function(x){
nm <- deparse(substitute(x))
logoutput(
glue(nm, " data size = ", nrow(x)),
glue(nm, " memory usage = ", format(object.size(x), units="GB", standard="SI", digits=3L))
)
}
logoutput_table <- function(x){
capture.output(
x,
file=fs::path(output_dir, glue("model_log.txt")),
append=TRUE
)
cat("\n", file = fs::path(output_dir, glue("model_log.txt")), sep = "\n  ", append = TRUE)
}
## import globally defined study dates and convert to "Date"
study_dates <-
jsonlite::read_json(path=here("lib", "design", "study-dates.json")) %>%
map(as.Date)
## import metadata ----
events <- read_rds(here("lib", "design", "event-variables.rds"))
outcome_var <- events$event_var[events$event==outcome]
var_labels <- read_rds(here("lib", "design", "variable-labels.rds"))
# compose modelling dataset ----
## one pow per patient ----
data_cohort <- read_rds(here("output", "data", "data_cohort.rds"))
## apply subgrouping if applicable
if (subgroup!="none") {
data_cohort <- dplyr::filter_at(data_cohort,
stringr::str_split_fixed(subgroup,"-",2)[,1],
all_vars(.==stringr::str_split_fixed(subgroup,"-",2)[,2]))
}
logoutput_datasize(data_cohort)
## baseline variables ----
data_baseline <-
data_cohort %>%
transmute(
patient_id,
age,
sex,
ethnicity_combined,
imd_Q5,
region,
jcvi_group,
rural_urban_group,
prior_covid_infection,
prior_tests_cat,
multimorb,
learndis,
sev_mental,
vax12_type,
vax2_to_startdate =  study_dates$studystart_date - vax2_date,
vax2_week,
vax3_date,
vax3_type,
)
logoutput_datasize(data_baseline)
data_matched <-
read_rds(here("output", "models", "seqtrialcox", treatment, outcome, "match_data_matched.rds")) %>%
mutate(
treated_patient_id = paste0(treated, "_", patient_id),
)
data_tte <- read_rds(here("output", "models", "seqtrialcox", treatment, outcome, "match_data_tte.rds"))
if(removeobjects) rm(data_cohort)
View(data_matched)
View(data_cohort)
# # # # # # # # # # # # # # # # # # # # #
# This script:
# imports processed data
# fits some Cox models with time-varying effects
# The script must be accompanied by one argument:
# `outcome` - the dependent variable in the regression model
# # # # # # # # # # # # # # # # # # # # #
# Preliminaries ----
# import command-line arguments ----
args <- commandArgs(trailingOnly=TRUE)
if(length(args)==0){
# use for interactive testing
removeobjects <- FALSE
treatment <- "pfizer"
outcome <- "postest"
subgroup <- "vax12_type-pfizer-pfizer"
} else {
removeobjects <- TRUE
treatment <- args[[1]]
outcome <- args[[2]]
subgroup <- args[[3]]
}
## Import libraries ----
library('tidyverse')
library('here')
library('glue')
library('survival')
## Import custom user functions from lib
source(here("lib", "functions", "utility.R"))
source(here("lib", "functions", "survival.R"))
source(here("lib", "functions", "redaction.R"))
postbaselinecuts <- read_rds(here("lib", "design", "postbaselinecuts.rds"))
matching_variables <- read_rds(here("lib", "design", "matching_variables.rds"))
if(Sys.getenv("OPENSAFELY_BACKEND") %in% c("", "expectations")){
recruitment_period_cutoff <- 0.1
} else{
recruitment_period_cutoff <- read_rds(here("lib", "design", "recruitment_period_cutoff.rds"))
}
# create output directories ----
output_dir <- here("output", "models", "seqtrialcox", treatment, outcome, subgroup)
fs::dir_create(output_dir)
## create special log file ----
cat(glue("## script info for {outcome} ##"), "  \n", file = fs::path(output_dir, glue("model_log.txt")), append = FALSE)
## functions to pass additional log info to seperate file
logoutput <- function(...){
cat(..., file = fs::path(output_dir, glue("model_log.txt")), sep = "\n  ", append = TRUE)
cat("\n", file = fs::path(output_dir, glue("model_log.txt")), sep = "\n  ", append = TRUE)
}
logoutput_datasize <- function(x){
nm <- deparse(substitute(x))
logoutput(
glue(nm, " data size = ", nrow(x)),
glue(nm, " memory usage = ", format(object.size(x), units="GB", standard="SI", digits=3L))
)
}
logoutput_table <- function(x){
capture.output(
x,
file=fs::path(output_dir, glue("model_log.txt")),
append=TRUE
)
cat("\n", file = fs::path(output_dir, glue("model_log.txt")), sep = "\n  ", append = TRUE)
}
## import globally defined study dates and convert to "Date"
study_dates <-
jsonlite::read_json(path=here("lib", "design", "study-dates.json")) %>%
map(as.Date)
## import metadata ----
events <- read_rds(here("lib", "design", "event-variables.rds"))
outcome_var <- events$event_var[events$event==outcome]
var_labels <- read_rds(here("lib", "design", "variable-labels.rds"))
# compose modelling dataset ----
## one pow per patient ----
data_cohort <- read_rds(here("output", "data", "data_cohort.rds"))
## apply subgrouping if applicable
if (subgroup!="none") {
data_cohort <- dplyr::filter_at(data_cohort,
stringr::str_split_fixed(subgroup,"-",2)[,1],
all_vars(.==stringr::str_split_fixed(subgroup,"-",2)[,2]))
}
logoutput_datasize(data_cohort)
## baseline variables ----
data_baseline <-
data_cohort %>%
transmute(
patient_id,
age,
sex,
ethnicity_combined,
imd_Q5,
region,
jcvi_group,
rural_urban_group,
prior_covid_infection,
prior_tests_cat,
multimorb,
learndis,
sev_mental,
vax12_type,
vax2_to_startdate =  study_dates$studystart_date - vax2_date,
vax2_week,
vax3_date,
vax3_type,
)
logoutput_datasize(data_baseline)
data_matched <-
read_rds(here("output", "models", "seqtrialcox", treatment, outcome, "match_data_matched.rds")) %>%
mutate(
treated_patient_id = paste0(treated, "_", patient_id),
)
data_tte <- read_rds(here("output", "models", "seqtrialcox", treatment, outcome, "match_data_tte.rds"))
if(removeobjects) rm(data_cohort)
View(data_cohort)
View(data_matched)
table(data_matched$vax12_type)
